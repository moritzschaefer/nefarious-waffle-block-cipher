{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from math import exp\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def s_func(x, y):\n",
    "    exponent = (((x+1)*3+(y+3)*17)/9)\n",
    "    return int(round(exp(exponent))%256)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "s_box = np.ndarray(shape=(16,16), dtype=int)\n",
    "for index in np.ndindex((16,16)):\n",
    "    s_box[index] = s_func(index[0], index[1])\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0x93, 0x6b, 0xe5, 0x8b, 0xe, 0xc4, 0x68, 0xc, 0x3, 0x76, 0x52,\n",
       "        0x46, 0xc, 0x7f, 0xb9, 0x63],\n",
       "       [0x33, 0x8b, 0x27, 0xc3, 0xaa, 0xb1, 0x0, 0x8, 0xc9, 0x2, 0xec,\n",
       "        0xdb, 0x38, 0xd5, 0x8d, 0xa8],\n",
       "       [0x12, 0x4c, 0x31, 0x47, 0xaf, 0x9e, 0x41, 0x7c, 0xea, 0xd4, 0xb9,\n",
       "        0x2f, 0x85, 0x4, 0x72, 0x57],\n",
       "       [0x49, 0x53, 0x47, 0x4b, 0x9e, 0xab, 0x9d, 0x16, 0xd1, 0x52, 0xde,\n",
       "        0xab, 0xc1, 0x26, 0x46, 0x89],\n",
       "       [0xfa, 0x88, 0x5e, 0x2d, 0xbd, 0xce, 0x1d, 0x41, 0x48, 0x86, 0xb5,\n",
       "        0xe0, 0x14, 0x16, 0x4e, 0x64],\n",
       "       [0x58, 0x2b, 0xc5, 0xde, 0x4d, 0xd4, 0x7d, 0xab, 0x7b, 0x1a, 0xa5,\n",
       "        0x39, 0x26, 0xee, 0x4c, 0xbb],\n",
       "       [0xa5, 0xfe, 0x14, 0x8, 0x40, 0xb8, 0x15, 0xc2, 0xd8, 0x9, 0xa4,\n",
       "        0xf5, 0x95, 0xa, 0x1f, 0xd2],\n",
       "       [0x40, 0x74, 0x7a, 0xac, 0x19, 0x89, 0x55, 0xc3, 0x32, 0xd6, 0xca,\n",
       "        0xe1, 0xdf, 0xcb, 0xa2, 0xa5],\n",
       "       [0xae, 0xf6, 0x8c, 0x21, 0x41, 0xc, 0x8b, 0x42, 0xc, 0xda, 0x4c,\n",
       "        0xd5, 0x6d, 0x21, 0xe3, 0x34],\n",
       "       [0xa7, 0x4a, 0xd1, 0xd1, 0xc2, 0xdf, 0xef, 0x51, 0x96, 0xd5, 0x15,\n",
       "        0x1a, 0xb2, 0x3c, 0x7a, 0x10],\n",
       "       [0x2d, 0x16, 0x45, 0x99, 0xd1, 0x4e, 0xdf, 0xdb, 0x19, 0xbc, 0x52,\n",
       "        0x2f, 0x99, 0x7c, 0xb4, 0xc4],\n",
       "       [0xa7, 0xa3, 0x4e, 0x69, 0x7d, 0x5f, 0xf6, 0xea, 0x1d, 0xd7, 0xeb,\n",
       "        0xb3, 0x10, 0x6a, 0x8c, 0x9c],\n",
       "       [0xa, 0xe7, 0x9a, 0xc8, 0xad, 0x6, 0x69, 0x8a, 0x34, 0xda, 0xf1,\n",
       "        0x8f, 0x8c, 0xb4, 0xa3, 0xf0],\n",
       "       [0x14, 0xf8, 0xbd, 0x5f, 0x32, 0xbf, 0x5c, 0xd0, 0xd5, 0xe1, 0x80,\n",
       "        0x8a, 0xbc, 0xd2, 0x32, 0xd0],\n",
       "       [0x96, 0x13, 0x9a, 0x9e, 0x12, 0xed, 0xce, 0xee, 0xb8, 0xc7, 0x39,\n",
       "        0xf, 0x87, 0x68, 0x52, 0x90],\n",
       "       [0xe2, 0x71, 0x18, 0x84, 0xb7, 0xdf, 0x6f, 0x85, 0xa6, 0x63, 0x75,\n",
       "        0xc7, 0x2f, 0x90, 0x40, 0x90]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.set_printoptions(formatter={'int':hex})\n",
    "s_box.astype(int)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "diffs = dict([ (i, [0]*256) for i in range(256)])\n",
    "\n",
    "for a,b in itertools.product(range(256), range(256)):\n",
    "    diff = s_box[a&0x0f,a>>4] ^ s_box[b&0x0f,b>>4]\n",
    "    diffs[a^b][diff] += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "49\n",
      "115\n"
     ]
    }
   ],
   "source": [
    "for k, v in diffs.items():\n",
    "    if max(v) > 10:\n",
    "        print(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
